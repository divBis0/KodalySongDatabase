<%= simple_form_for(@song) do |f| %>
  <%= f.error_notification %>
  <% if @song.errors.any? %>
    <% @song.errors.full_messages.each do |message| %>
      <li><%= message %></li>
    <% end %>
  <% end %>

  <div class="form-inputs">
    <div class="edit-song-title">
    <div class="form-table">
      <div class="form-table-row">
        <div class="form-table-cell">
          <h2><%= f.input :title, label: false %></h2>
        </div>
        <% if @song.next.present? %>
          <div class="form-actions form-table-cell" style="width: 210px">
            <%= f.button :submit, "Save" %>
            <%= f.button :submit, "Save and Next" %>
          </div>
        <% else %>
          <div class="form-actions form-table-cell" style="width: 80px">
            <%= f.button :submit, "Save" %>
          </div>
        <% end %>
      </div>
      <div class="form-table-row">
        Jump to:
        <a href="#Notation">Notation</a> |
        <% @categories.each do |cat| %>
          <a class="anchor" href="#<%= cat.name.gsub(/\W/,'') %>"><%= cat.name %></a> |
        <% end %>
        <a class="anchor" href="#Comments">Comments</a>
      </div>
    </div>
    <hr>
    </div>
    <h3 id="Notation">Notation</h3>
    <% @im_id_cols.each_index do |i| %>   
      <%= render 'im_form', im_path: @im_paths[i], im_id: @im_id_cols[i], f: f, ix: i+1, vis: (i==0 || !@im_paths[i-1].nil?) %>
    <% end %>
    
    <% @categories.each do |cat| %>
      <hr>
        <h3 id="<%= cat.name.gsub(/\W/,'') %>"><%= cat.name %></h3>
        <% if cat.name == "Source" %>
          <div>
            <%= hidden_field_tag(:source_sel, current_user.sources.empty? ? "new" : "existing") %>
            <ul class="accordion" data-accordion>
              <li class="accordion-item <%= 'is-active' if current_user.sources.empty? =%>" data-accordion-item>
                <a href="#" class="accordion-title new-source" id="newSourceA">New Source</a>
                <div class="accordion-content" data-tab-content >
                  <%= f.fields_for :source do |ff| %>
                    <div class="form-inputs">
                      <%= ff.input :title %>
                      <%= ff.input :author %>
                      <%= ff.input :publisher %>
                      <%= ff.input :city %>
                      <%= ff.input :copyright_year %>
                      <%= ff.input :web_site %>
                    </div>
                  <% end %>
                </div>
              </li>
              <li class="accordion-item <%= 'is-active' unless current_user.sources.empty? =%>" data-accordion-item>
                <a href="#" class="accordion-title existing-source" id="existingSourceA">Existing Source</a>
                <div class="accordion-content" data-tab-content >
                  <%= f.collection_select :source_id, current_user.sources.order(:title),:id,:title_with_author, include_blank: true %>
                </div>
              </li>
            </ul>
          </div>
        <% elsif cat.name == "Pedagogy" %>
          <div class="concepts">
            <table id="song_concepts_table">
              <tbody>
                <tr>
                  <th>Concept</th>
                  <th>Prepare</th>
                  <th>Present</th>
                  <th>Practice</th>
                  <th>Delete</th>
                </tr>
                <%= f.fields_for :concepts do |ff| %>
                  <%= render partial: 'concept_fields', locals: {f: ff} %>
                <% end %>
              </tbody>
            </table>
            <%= link_to_add_concept_fields(f, "#song_concepts_table", @song, false) %>
            <%= link_to_add_concept_fields(f, "#song_concepts_table", @song, true) %>
          </div>
        <% end %>
        <%= f.fields_for :field_entries, @song.field_entries.select { |fe| fe.field_category == cat }.sort_by(&:field_id) do |ff| %>
          <div>
            <%= ff.input :id, :as=>:hidden %>
            <%= ff.input :field_id, :as=>:hidden %>
            <% if ff.object.field.display_type == "string_selection" %>
              <%= ff.input :data, label: ff.object.field.name, collection: ff.object.field.options.split(','), include_blank: true %>
            <% else %>
              <%= ff.input :data, :as=>ff.object.field.display_type, label: ff.object.field.name %>
            <% end %>
          </div>
        <% end %>
    <% end %>
    <hr>
    <h3 id="Comments">Comments</h3><%= f.text_area :comments, :input_html => {:rows => 5} %>
  </div>
<% end %>

<div id="info"></div>

<%= cloudinary_js_config %>

<script>
  $(document).ready(function() {
    // Cloudinary jQuery integration library uses jQuery File Upload widget
    // (see http://blueimp.github.io/jQuery-File-Upload/).
    // Any file input field with cloudinary-fileupload class is automatically
    // wrapped using the File Upload widget and configured for Cloudinary uploads.
    // You can further customize the configuration using .fileupload method
    // as we do below.
    $(".cloudinary-fileupload")
      .cloudinary_fileupload({
        // Uncomment the following lines to enable client side image resizing and valiation.
        // Make sure cloudinary/processing is included the js file
        //disableImageResize: false,
        //imageMaxWidth: 800,
        //imageMaxHeight: 600,
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png|webp)$/i,
        maxFileSize: 1000000, // 1MB
        //dropZone: "#direct_upload",
        start: function (e) {
          $(this).closest(".im_form").find(".status").text("Starting upload...");
        },
        progress: function (e, data) {
          $(this).closest(".im_form").find(".status").text("Uploading... " + Math.round((data.loaded * 100.0) / data.total) + "%");
        },
        fail: function (e, data) {
          $(this).closest(".im_form").find(".status").text("Upload failed");
          console.log("FAIL");
          console.log(JSON.stringify(e));
          console.log(JSON.stringify(data));
        },
        replaceFileInput:false
      })
      .off("cloudinarydone").on("cloudinarydone", function (e, data) {
        $(this).closest(".im_form").find(".status").text("");
        var preview = $(this).closest(".im_form").find(".preview").html('');
        $.cloudinary.image(data.result.public_id, {
          format: data.result.format, crop: "fill", width: "800"
        }).appendTo(preview);

        //view_upload_details(data.result); // Uncomment to debug
        $(this).closest(".im_form").next(".im_form").show();
        $(this).closest(".im_form").find("button.im-delete").show()
        $(this).closest(".im_form").find("input[type=hidden]").val(0);
      });
      /*$("input.cloudinary-fileupload[type=file]").cloudinary_fileupload({
        replaceFileInput:false
      });*/
  });

  function view_upload_details(upload) {
    // Build an html table out of the upload object
    var rows = [];
    $.each(upload, function(k,v){
      rows.push(
        $("<tr>")
          .append($("<td>").text(k))
          .append($("<td>").text(JSON.stringify(v))));
    });
    $("#info").html(
      $("<div class=\"upload_details\">")
        .append("<h2>Upload metadata:</h2>")
        .append($("<table>").append(rows)));
  }
  
  $(document).ready(function() {
    $("button.im-delete").click(function() {
      $(this).prev("input[type=hidden]").val(1);
      $(this).closest(".im_form").find(".preview").html('')
      $(this).hide()
      $(this).closest(".im_form").next(".im_form").find("button.im-delete:hidden").closest(".im_form").hide()
    });
  });
  
  function remove_concept(button_element) {
    button_element.prev("input[type=hidden]").val(1);
    button_element.closest("tr").hide();
  }
  
  jQuery(function($) {
    $("button.add-concept").click(function() {
      var new_id = new Date().getTime();
      var regexp = new RegExp($(this).data("placeholderIx"), "g");
      var tbody_ref = $('#song_concepts_table > tbody:last-child').append($(this).data("fields").replace(regexp, new_id));
      tbody_ref.find('tr:last').find('textarea.rhythm.notation').keyboard(NotationKeyboard.options).addTyping({showTyping : true});
      tbody_ref.find('tr:last').find('button.del-concept').click(function() {
        remove_concept($(this));
      });
    });
    
    // *** Mapped keys ***
    $('.rhythm.notation').keyboard(NotationKeyboard.options).addTyping({showTyping : true});
    
    // *** Mapped keys ***
    $('.tones').not('.ui-keyboard-input').keyboard(ToneKeyboard.options).addTyping({showTyping : true});
  });
  
  $(document).ready(function() {
    $("a.new-source").click(function(e) {
      $("#source_sel").val("new");
    });
  });
  
  $(document).ready(function() {
    $("a.existing-source").click(function(e) {
      $("#source_sel").val("existing");
    });
  });
  
  $(document).ready(function() {
    $("button.del-concept").click(function() {
      remove_concept($(this));
    });
  });
  
  $(document).ready(function() {
    $("button.add-string-item").click(function() {
      $(this).parent().before("<td><input type='text' id='' value=''></td>");
    });
  });
  
  $(document).ready(function() {
    $("button.add-rhythm-item").click(function() {
      $(this).parent().before("<td><input type='text' id='' value='' class='rhythm notation'></td>");
      $(this).parent().prev().children().keyboard(NotationKeyboard.options).addTyping({showTyping : true});
    });
  });
  
  $("form").submit(function() {
    $(this).find("div.string_set, div.rhythm_set").each(function() {
      var str = $(this).find("input[type='text']").filter(function() {
        return !!this.value;
      }).map(function() {
        return this.value;
      }).get().join(';');
      $(this).children("input[type='hidden']").val(str);
    });
  });
  
  // Select all links with hashes
$('a[href*="#"]')
  // Remove links that don't actually link to anything
  .not('[href="#"]')
  .not('[href="#0"]')
  .click(function(event) {
    // On-page links
    if (
      location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') 
      && 
      location.hostname == this.hostname
    ) {
      // Figure out element to scroll to
      var target = $(this.hash);
      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
      // Does a scroll target exist?
      if (target.length) {
        // Only prevent default if animation is actually gonna happen
        event.preventDefault();
        $('html, body').animate({
          scrollTop: target.offset().top-140
        }, 1000, function() {
          // Callback after animation
          // remember where we are
          var x = window.scrollX, y = window.scrollY;
          // Must change focus!
          var $target = $(target);
          $target.focus();
          if ($target.is(":focus")) { // Checking if the target was focused
            return false;
          } else {
            $target.attr('tabindex','-1'); // Adding tabindex for elements not focusable
            $target.focus(); // Set focus again
          };
          window.scrollTo(x, y); // Return to location
        });
      }
    }
  });
</script>